// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(uuid()) @db.Uuid
  name       String
  secondName String @map("second_name")
  email      String @unique
  password   String

  bankAccounts        BankAccount[]
  categoryTransaction CategoryTransaction[]
  transactions        Transaction[]
  categoryContacts    CategoryContact[]
  contacts            Contact[]
  task                Task[]
  categoryTask        CategoryTask[]

  @@map("users")
}

enum BankAccountType {
  CHECKING
  INVESTMENT
  CASH

  @@map("bank_account_type")
}

model BankAccount {
  id             String          @id @default(uuid()) @db.Uuid
  userId         String          @map("user_id") @db.Uuid
  name           String
  initialBalance Float           @map("initial_balance")
  type           BankAccountType
  color          String
  transactions   Transaction[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bank_accounts")
}

enum TransactionType {
  INCOME
  EXPENSE

  @@map("transaction_type")
}

model CategoryTransaction {
  id           String          @id @default(uuid()) @db.Uuid
  userId       String          @map("user_id") @db.Uuid
  name         String
  icon         String
  type         TransactionType
  transactions Transaction[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("category_transactions")
}

model Transaction {
  id            String          @id @default(uuid()) @db.Uuid
  userId        String          @map("user_id") @db.Uuid
  bankAccountId String          @map("bank_account_id") @db.Uuid
  categoryId    String?         @map("category_id") @db.Uuid
  name          String
  value         Float
  date          DateTime
  type          TransactionType

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount         BankAccount          @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  categoryTransaction CategoryTransaction? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model CategoryContact {
  id      String    @id @default(uuid()) @db.Uuid
  userId  String    @map("user_id") @db.Uuid
  name    String
  contact Contact[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("categories_contacts")
}

model Contact {
  id         String  @id @default(uuid()) @db.Uuid
  userId     String  @map("user_id") @db.Uuid
  categoryId String? @map("category_id") @db.Uuid
  name       String
  email      String? @unique
  phone      String?

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryContact CategoryContact? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("contacts")
}

model CategoryTask {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  name   String
  Task   Task[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("category_task")
}

model Task {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  name        String
  categoryId  String?  @map("category_id") @db.Uuid
  description String?
  dueDate     DateTime @map("due_date")
  done        Boolean  @default(false)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryTask CategoryTask? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("task")
}
